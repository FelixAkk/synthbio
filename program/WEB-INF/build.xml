<?xml version="1.0"?>
<!--
 * Project Zelula
 *
 * Contextproject TI2800
 * TU Delft - University of Technology
 *
 * Authors:
 *  Felix Akkermans, Niels Doekemeijer, Thomas van Helden
 *  Albert ten Napel, Jan Pieter Waagmeester
 *
 * https://github.com/FelixAkk/synthbio
-->
<project name="synthbio" default="compile" basedir=".">
	<property name="src" value="src"/>
	<property name="build" value="classes"/>

	<property name="js-minified" value="zelula-combined-min.js" />
	
	<!-- cobertura -->

	<property name="cobertura.dir" value="lib/cobertura" />

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	
	<target name="instrument" depends="compile">
		<cobertura-instrument todir="instrumented-classes">
			<fileset dir="classes">
				<include name="**/*.class"/>
				<exclude name="**/Test*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="cover-test" depends="instrument">
		<junit fork="yes" printsummary="yes" showoutput="yes">
			<classpath location="lib/cobertura/cobertura.jar"/>
			<classpath location="instrumented-classes"/>
			<assertions>
				<enable/>
			</assertions>
			<classpath>
				<path refid="project-classpath" />
				<pathelement path="${build}"/>
			</classpath>
			
			<batchtest haltonfailure="no">
				<formatter type="brief" usefile="false" />
				<fileset dir="${src}">
					<exclude name="**/json/tests/*"/>
					<exclude name="**/servlets/test/*"/>
					<include name="**/simulator/test/*"/>
					<include name="**/Test*.java" />
				</fileset>
			</batchtest>
		</junit> 
	</target>
	
	<target name="coverage-report" depends="cover-test">
		<cobertura-report srcdir="src" destdir="cobertura-report"/>
	</target>
	
	<!-- /cobertura -->
	
	<path id="project-classpath">
		<!--
			Make sure Hamcrest is included first, to avoid SecurityExceptions from different Hamcrest versions being included.
			(http://www.shaunabram.com/hamcrest/)
		-->
		<fileset dir="lib" includes="hamcrest*.jar" />
		<fileset dir="lib" includes="*.jar" excludes="ant-jshint*" />
		<fileset dir="lib/htmlunit" includes="*.jar" />
	</path>

	<target name="init">
		<mkdir dir="${build}"/> 
	</target>

	<!--
		Compile all sources.
		Turn debugging on, and include lines in stack traces.
	-->
	<target name="compile" depends="init">
		<javac
			srcdir="${src}"
			destdir="${build}"
			classpathref="project-classpath"
			includeantruntime="false"
			debug="on" debuglevel="lines,vars,source"
		>
			<!--
				Turn this option on to see de details about this message:
				Note: Some input files use unchecked or unsafe operations.
				Note: Recompile with -Xlint:unchecked for details.
			-->
			<!-- <compilerarg value="-Xlint"/> -->
		</javac>
	</target>

	<!-- Just an alias -->
	<target name="build" depends="compile" />

	<!--
		Test all non-servlet tests.
	-->
	<target name="test" depends="compile">
		<junit fork="yes" printsummary="yes" showoutput="yes">
			<assertions>
				<enable/>
			</assertions>
			<classpath>
				<path refid="project-classpath" />
				<pathelement path="${build}"/>
			</classpath>
			
			<batchtest haltonfailure="no">
				<formatter type="brief" usefile="false" />
				<fileset dir="${src}">
					<exclude name="**/json/tests/*"/>
					<exclude name="**/servlets/test/*"/>
					<include name="**/simulator/test/*"/>
					<include name="**/Test*.java" />
				</fileset>
			</batchtest>
		</junit> 
	</target>

	<!--
		Adding another test-target to test the servlets.
		Seperate, because they take a lot of time.
	-->
	<target name="test-servlets" depends="compile">
		<junit fork="yes" printsummary="yes" showoutput="yes">
			<assertions>
				<enable/>
			</assertions>
			<classpath>
				<path refid="project-classpath" />
				<pathelement path="${build}"/>
			</classpath>
			
			<batchtest haltonfailure="no">
				<formatter type="brief" usefile="false" />
				<fileset dir="${src}">
					<exclude name="**/json/tests/*"/>
					<include name="**/servlets/test/*"/>
				</fileset>
			</batchtest>
		</junit> 
	</target>

	
	<!--
		Target test-all runs all known tests after a clean build.
	-->
	<target name="test-all" depends="clean,test,test-servlets" />

	<!--
		Run a single test with
			ant runtest -Dtest=<TestClass>
			
		Or multiple tests with a wildcard:
			ant runtest -Dtest=*Test
	-->
	<target name="ensure-test-name" unless="test">
		<fail message="You must run this target with -Dtest=TestName"/>
	</target>
	<target name="runtest" description="Runs the test you specify on the command line with -Dtest=" depends="compile, ensure-test-name">
		<junit printsummary="withOutAndErr" fork="yes">
			<assertions>
				<enable/>
			</assertions>
			<classpath>
				<path refid="project-classpath" />
				<pathelement path="${build}"/>
			</classpath>
			<formatter type="plain" usefile="false"/>
			<batchtest>
				<fileset dir="${src}">
					<include name="**/${test}.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--
		Create javadoc documentation.

		Provide a destination to put it in with -Dtest=<destination>
	-->
	<target name="require-javadoc-dest" unless="dest">
		<fail message="You must run this target with -Ddest=Destenation"/>
	</target>
	<target name="javadoc" depends="compile, require-javadoc-dest">
		<javadoc
			destdir="${dest}"
			author="true"
			version="true"
			use="true"
			windowtitle="Zelula API"
		>
			<classpath>
				<path refid="project-classpath" />
				<pathelement path="${build}"/>
			</classpath>
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="synthbio/**"/>
				<exclude name="org/**"/>
			</packageset>
			<doctitle><![CDATA[<h1>Zelula Javadoc</h1>]]></doctitle>
			<!-- provide links to javadocs of certain libraries -->
			<link href="http://json.org/javadoc/" />
			<link href="http://junit.sourceforge.net/javadoc/" />
			<link href="http://download.oracle.com/javase/6/docs/api/" />
			<link href="http://sbml.org/Special/Software/JSBML/build/apidocs/" />
<!--
			<tag name="todo" scope="all" description="To do:"/>
-->
		</javadoc>
	</target>
	
	<!--
		And why not throw in a Checkstyle target?
	-->
	<taskdef resource="checkstyletask.properties" classpath="lib/checkstyle-5.5-all.jar"/>
	<target name="checkstyle">
		<checkstyle config="checkstyle.xml">
			<fileset dir="src/" includes="**/*.java" excludes="**/org/json/**" />

			<formatter type="plain"/>
			<formatter type="xml" toFile="classes/checkstyle_errors.xml"/>
		</checkstyle>

	</target>
	
	<!--
		Clean the compiled stuff
	-->
	<target name="clean">
		<delete dir="${build}" />
		<delete dir="../js/min/" />
		<delete file="../${js-minified}" />
	</target>

	<!--
		Try to implement automated jslint checking
		http://docs.jslint4java.googlecode.com/git/2.0.1/ant.html
	-->
	<taskdef name="jslint"
		classname="com.googlecode.jslint4java.ant.JSLintTask"
		classpath="lib/jslint4java-2.0.2.jar" />
	<target name="jslint">
		<jslint>
			<formatter type="plain" />
			<fileset dir="../js">
				<include name="*.js" />
				<exclude name="*.min.js" />
			</fileset>
		</jslint>
	</target>

	<!--
		Is JSHint a better way?
	-->
	<taskdef name="jshint" classname="com.philmander.ant.JsHintAntTask"
		classpath="lib/ant-jshint-0.2.1-deps.jar" />
	<target name="jshint">
		<jshint dir="../js" options="white=false,plusplus=false">
			<include name="*.js" />
			<exclude name="*.min.js" />
		</jshint>
	</target>

	<!--
		Minify all javascript files in js/, except those already minified.
		http://code.google.com/p/jsmin-ant-task/
		and concatenate them to ${js-minified}
	-->
	<taskdef name="jsmin"
		classname="net.matthaynes.jsmin.JSMin_Task"
		classpath="lib/jsmin.0.2.4.jar" />
	
	<target name="jsmin" depends="jslint">
		<jsmin destdir="../js/min/" suffix="true">
			<fileset dir="../js/">
				<include name="*.js"/>
				<exclude name="*min.js"/>
			</fileset>
			<fileset dir="../js/lib/">
				<include name="*.js"/>
				<exclude name="*min.js"/>
			</fileset>
		</jsmin>
		<concat destfile="../${js-minified}">
			<fileset file="../js/*min.js" />
			<fileset file="../js/lib/*min.js" />
			<fileset file="../js/min/*min.js" />
		</concat>

		<echo>Minified all javascript files in ../js/** and combined them in ../${js-minified}</echo>
	</target>
</project>
