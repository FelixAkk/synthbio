<?xml version="1.0"?>
<project name="synthbio" default="compile" basedir=".">
	<property name="src" value="src"/>
	<property name="build" value="classes"/>

	<path id="project-classpath">
		<!--
			Make sure Hamcrest is included first, to avoid SecurityExceptions from different Hamcrest versions being included.
			(http://www.shaunabram.com/hamcrest/)
		-->
		<fileset dir="lib" includes="hamcrest*.jar" />
		<fileset dir="lib" includes="*.jar" />
		<fileset dir="lib/htmlunit" includes="*.jar" />
	</path>

	<target name="init">
		<mkdir dir="${build}"/> 
	</target>

	<!--
		Compile all sources.
		Turn debugging on, and include lines in stack traces.
	-->
	<target name="compile" depends="init">
		<javac srcdir="${src}" destdir="${build}" classpathref="project-classpath" includeantruntime="false" debug="on" debuglevel="lines,vars,source" />
	</target>

	<!-- Just an alias -->
	<target name="build" depends="compile" />

	<!--
		Test all non-servlet tests.
	-->
	<target name="test" depends="compile">
		<junit fork="yes" printsummary="yes" showoutput="yes">
			<assertions>
				<enable/>
			</assertions>
			<classpath>
				<path refid="project-classpath" />
				<pathelement path="${build}"/>
			</classpath>
			
			<batchtest haltonfailure="no">
				<formatter type="brief" usefile="false" />
				<fileset dir="${src}">
					<exclude name="**/json/tests/*"/>
					<exclude name="**/servlets/test/*"/>
					<include name="**/simulator/test/*"/>
					<include name="**/Test*.java" />
				</fileset>
			</batchtest>
		</junit> 
	</target>

	<!--
		Adding another test-target to test the servlets.
		Seperate, because they take a lot of time.
	-->
	<target name="test-servlets" depends="compile">
		<junit fork="yes" printsummary="yes" showoutput="yes">
			<assertions>
				<enable/>
			</assertions>
			<classpath>
				<path refid="project-classpath" />
				<pathelement path="${build}"/>
			</classpath>
			
			<batchtest haltonfailure="no">
				<formatter type="brief" usefile="false" />
				<fileset dir="${src}">
					<exclude name="**/json/tests/*"/>
					<include name="**/servlets/test/*"/>
				</fileset>
			</batchtest>
		</junit> 
	</target>

	<target name="test-all" depends="test,test-servlets" />

	<!--
		Run a single test with
			ant runtest -Dtest=<TestClass>
			
		Or multiple tests with a wildcard:
			ant runtest -Dtest=*Test
	-->
	<target name="ensure-test-name" unless="test">
		<fail message="You must run this target with -Dtest=TestName"/>
	</target>
	<target name="runtest" description="Runs the test you specify on the command line with -Dtest=" depends="compile, ensure-test-name">
		<junit printsummary="withOutAndErr" fork="yes">
			<assertions>
				<enable/>
			</assertions>
			<classpath>
				<path refid="project-classpath" />
				<pathelement path="${build}"/>
			</classpath>
			<formatter type="plain" usefile="false"/>
			<batchtest>
				<fileset dir="${src}">
					<include name="**/${test}.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!--
		Create javadoc documentation.

		Provide a destination to put it in with -Dtest=<destination>
	-->
	<target name="require-javadoc-dest" unless="dest">
		<fail message="You must run this target with -Ddest=Destenation"/>
	</target>
	<target name="javadoc" depends="compile, require-javadoc-dest">
		<javadoc
			destdir="${dest}"
			sourcepath="${src}"
			author="true"
			version="true"
			use="true"
			windowtitle="Zelula API">
		<classpath>
				<path refid="project-classpath" />
				<pathelement path="${build}"/>
		</classpath>
		<doctitle><![CDATA[<h1>Zelula Javadoc</h1>]]></doctitle>
		<tag name="todo" scope="all" description="To do:"/>

<!--
		<link offline="true" href="http://download.oracle.com/javase/6/docs/api/" packagelistLoc="C:\tmp"/>
-->
<!--
		<link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
-->
		</javadoc>
	</target>
	<!--
		Clean the compiled stuff
	-->
	<target name="clean">
		<delete dir="${build}" />
		<mkdir dir="${build}"/> 
	</target>

	<!--
		Try to implement automated jslint checking
		http://docs.jslint4java.googlecode.com/git/2.0.1/ant.html
	-->
	<taskdef name="jslint"
		classname="com.googlecode.jslint4java.ant.JSLintTask"
		classpath="lib/jslint4java-2.0.2.jar" />
	<target name="jslint">
		<jslint>
			<formatter type="plain" />
			<fileset dir="../js">
				<include name="*.js" />
				<exclude name="*.min.js" />
			</fileset>
		</jslint>
	</target>
	
	<!--
		Minify all javascript files in js/, except those already minified.
		http://code.google.com/p/jsmin-ant-task/
	-->
	<taskdef name="jsmin"
		classname="net.matthaynes.jsmin.JSMin_Task"
		classpath="lib/jsmin.0.2.4.jar" />
	
	<target name="jsmin" depends="jslint">
		<jsmin destdir="../js/" suffix="true">
			<fileset dir="../js/">
				<include name="*.js"/>
				<exclude name="*min.js"/>
			</fileset>
		</jsmin>
	</target>

</project>